{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","Date","beginTime","setBegin","workTime","setWork","endTime","setEnd","calculateEnd","begin","work","breakMinutes","hours","getHours","minutes","getMinutes","setHours","setMinutes","className","utils","moment","TimePicker","value","onChange","event","ampm","orientation","autoOk","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAiEeA,MAzDf,WAAgB,IAAD,EACiBC,mBAAS,IAAIC,KAAK,qBADnC,mBACNC,EADM,KACKC,EADL,OAEeH,mBAAS,IAAIC,KAAK,qBAFjC,mBAENG,EAFM,KAEIC,EAFJ,OAGaL,mBAAS,IAAIC,KAAK,qBAH/B,mBAGNK,EAHM,KAGGC,EAHH,KAKb,SAASC,EAAaC,EAAOC,GAC3B,IAAIC,EAAe,EAEfC,EAAQF,EAAKG,WACbC,EAAUJ,EAAKK,cAEfH,EAAQ,GAAgB,IAAVA,GAA2B,IAAZE,KAC/BH,EAAe,IAGF,IAAVC,GAAeE,GAAW,GAAMF,EAAQ,KAC3CD,EAAe,GAEXC,GAAS,GAAKE,GAAW,IAC3BH,GAAgB,KAIpBF,EAAMO,SAASP,EAAMI,WAAaD,GAClCH,EAAMQ,WAAWR,EAAMM,aAAeD,EAAUH,GAChDJ,EAAOE,GAiBT,OACE,qBAAKS,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,eAAC,IAAD,CAAyBC,MAAOC,IAAhC,UACE,mBAAGF,UAAU,WAAb,0BACA,cAACG,EAAA,EAAD,CAAYC,MAAOlB,EAAUmB,SAnBrC,SAA0BC,GACxB,IAAId,EAAO,IAAIT,KAAKuB,GAChBf,EAAQ,IAAIR,KAAKC,GACrBG,EAAQ,IAAIJ,KAAKuB,IACjBhB,EAAaC,EAAOC,IAe2Ce,MAAM,EAAOC,YAAY,YAAYC,QAAM,IACpG,mBAAGT,UAAU,WAAb,4BACA,cAACG,EAAA,EAAD,CAAYC,MAAOpB,EAAWqB,SAdtC,SAA2BC,GACzB,IAAId,EAAO,IAAIT,KAAKuB,GAChBf,EAAQ,IAAIR,KAAKG,GACrBD,EAAS,IAAIF,KAAKuB,IAClBhB,EAAaC,EAAOC,IAU6Ce,MAAM,EAAOC,YAAY,YAAYC,QAAM,IACtG,mBAAGT,UAAU,WAAb,0BACA,cAACG,EAAA,EAAD,CAAYC,MAAOhB,EAASmB,MAAM,EAAOG,UAAQ,YC/C5CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d4d6c7f0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport moment from '@date-io/moment';\nimport {\n  TimePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\nimport './App.css';\n\nfunction App() {\n  const [beginTime, setBegin] = useState(new Date('2017-05-24T07:00'));\n  const [workTime, setWork] = useState(new Date('2017-05-24T08:00'));\n  const [endTime, setEnd] = useState(new Date('2017-05-24T15:30'));\n\n  function calculateEnd(begin, work) {\n    let breakMinutes = 0;\n\n    let hours = work.getHours();\n    let minutes = work.getMinutes();\n\n    if (hours < 6 || (hours === 6 && minutes === 0)) {\n      breakMinutes = 0;\n    }\n\n    if ((hours === 6 && minutes >= 1) || hours > 6) {\n      breakMinutes = 30;\n\n      if (hours >= 9 && minutes >= 1) {\n        breakMinutes += 15;\n      }\n    }\n\n    begin.setHours(begin.getHours() + hours);\n    begin.setMinutes(begin.getMinutes() + minutes + breakMinutes);\n    setEnd(begin);\n  }\n\n  function handleWorkChange(event) {\n    let work = new Date(event);\n    let begin = new Date(beginTime);\n    setWork(new Date(event));\n    calculateEnd(begin, work);\n  }\n\n  function handleBeginChange(event) {\n    let work = new Date(event);\n    let begin = new Date(workTime);\n    setBegin(new Date(event));\n    calculateEnd(begin, work);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MuiPickersUtilsProvider utils={moment}>\n          <p className=\"App-text\">Arbeitszeit:</p>\n          <TimePicker value={workTime} onChange={handleWorkChange} ampm={false} orientation=\"landscape\" autoOk />\n          <p className=\"App-text\">Arbeitsbeginn:</p>\n          <TimePicker value={beginTime} onChange={handleBeginChange} ampm={false} orientation=\"landscape\" autoOk />\n          <p className=\"App-text\">Arbeitsende:</p>\n          <TimePicker value={endTime} ampm={false} readOnly />\n        </MuiPickersUtilsProvider></header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}